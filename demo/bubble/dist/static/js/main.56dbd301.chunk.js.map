{"version":3,"sources":["Bubble.js","serviceWorker.js","index.js"],"names":["Bubble","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","id","lifetime","obj","size","top","left","rand","bind","assertThisInitialized","flyup","min","max","Math","random","scope","bubble_id","speedBorn","setInterval","console","log","setState","speed","born","DOMBubble","document","createElement","className","style","width","height","setAttribute","body","appendChild","flyInterval","deadline","setTimeout","replace","parentNode","removeChild","clearInterval","parseInt","react_default","a","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","Bubble_Bubble","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAIqBA,2BACjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,GAAI,EACJC,SAAU,EACVC,IAAK,GACLC,KAAM,GACNC,IAAK,EACLC,KAAM,GAEVb,EAAKc,KAAOd,EAAKc,KAAKC,KAAVd,OAAAe,EAAA,EAAAf,CAAAD,IACZA,EAAKiB,MAAQjB,EAAKiB,MAAMF,KAAXd,OAAAe,EAAA,EAAAf,CAAAD,IAXEA,oEAcdkB,EAAKC,GACN,OAAOC,KAAKC,UAAYF,EAAMD,GAAOA,8CAGrC,IAIeI,EAJXC,EAAY,EACZC,EAAY,IAEhBC,aACeH,EAKRnB,KAJQ,WACHqB,EAAYF,EAAMR,KAAK,GAAI,KAC3BY,QAAQC,IAAIH,KAEV,KAEdC,YACK,SAAUH,GACP,OAAO,WACHA,EAAMM,SAAS,CACXjB,KAAMW,EAAMR,KAAK,GAAI,IACrBL,SAAU,IACVoB,MAAOP,EAAMR,KAAK,GAAI,KACtBN,GAAIe,EACJX,IAAKU,EAAMR,KAAK,GAAI,KACpBD,KAAMS,EAAMR,KAAK,GAAI,QAEzBQ,EAAMQ,OACNP,KAXP,CAaEpB,MACHqB,kCAGJ,IAAMO,EAAYC,SAASC,cAAc,QACzCF,EAAUG,UAAY,4BAA8B/B,KAAKI,MAAMC,GAAK,oBAAsBL,KAAKI,MAAME,SAAW,IAEhHsB,EAAUI,MAAMC,MAAQjC,KAAKI,MAAMI,KAAO,KAC1CoB,EAAUI,MAAME,OAASlC,KAAKI,MAAMI,KAAO,KAC3CoB,EAAUI,MAAMvB,IAAMT,KAAKI,MAAMK,IAAM,KACvCmB,EAAUI,MAAMtB,KAAOV,KAAKI,MAAMM,KAAO,KACzCkB,EAAUO,aAAa,cAAe,oBACtCN,SAASO,KAAKC,YAAYT,GAE1B,IAAMU,EAActC,KAAKc,MAAMc,GAC/B5B,KAAKuC,SAASX,EAAWU,oCAEpBV,EAAWU,GAEhBE,WAAW,WACPZ,EAAUG,WAAa,OACvBH,EAAUG,UAAYH,EAAUG,UAAUU,QAAQ,UAAW,KAC9DzC,KAAKI,MAAME,SAAW,KAGzBkC,WAAW,WACHZ,EAAUc,YACVd,EAAUc,WAAWC,YAAYf,GAErCgB,cAAcN,IACftC,KAAKI,MAAME,wCAEZsB,GACF,OAAON,YAAY,WACfM,EAAUI,MAAMvB,IAAMoC,SAASjB,EAAUI,MAAMvB,KAAO,GAAK,MAC5DT,KAAKI,MAAMsB,wCAKd,OAEIoB,EAAAC,EAAAjB,cAAA,OAAKC,UAAU,OACXe,EAAAC,EAAAjB,cAAA,sBAAagB,EAAAC,EAAAjB,cAAA,WAAb,UACAgB,EAAAC,EAAAjB,cAAA,+CAxFoBkB,IAAMC,YCQtBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOV,EAAAC,EAAAjB,cAAC2B,EAAD,MAAY5B,SAAS6B,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.56dbd301.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles/animate.scss';\r\nimport './styles/bubble.scss'\r\n\r\nexport default class Bubble extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: 0,\r\n            lifetime: 0,\r\n            obj: '',\r\n            size: 10,\r\n            top: 0,\r\n            left: 0\r\n        };\r\n        this.rand = this.rand.bind(this);\r\n        this.flyup = this.flyup.bind(this);\r\n    }\r\n\r\n    rand(min, max) {\r\n        return Math.random() * (max - min) + min;\r\n    }\r\n    componentDidMount() {\r\n        let bubble_id = 0;\r\n        let speedBorn = 100;\r\n\r\n        setInterval(\r\n            (function (scope) {\r\n                return function () {\r\n                    speedBorn = scope.rand(10, 100);\r\n                    console.log(speedBorn);\r\n                }\r\n            })(this), 5000);\r\n\r\n        setInterval(\r\n            (function (scope) {\r\n                return function () {\r\n                    scope.setState({\r\n                        size: scope.rand(20, 50),\r\n                        lifetime: 10000,\r\n                        speed: scope.rand(50, 300),\r\n                        id: bubble_id,\r\n                        top: scope.rand(10, 650),\r\n                        left: scope.rand(10, 1350)\r\n                    });\r\n                    scope.born()\r\n                    bubble_id++;\r\n                }\r\n            })(this),\r\n            speedBorn);\r\n    }\r\n    born() {\r\n        const DOMBubble = document.createElement('span');\r\n        DOMBubble.className = \"fade-in bubble bubble_id-\" + this.state.id + \" bubble_lifetime-\" + this.state.lifetime + \" \";\r\n\r\n        DOMBubble.style.width = this.state.size + \"px\";\r\n        DOMBubble.style.height = this.state.size + \"px\";\r\n        DOMBubble.style.top = this.state.top + \"px\";\r\n        DOMBubble.style.left = this.state.left + \"px\";\r\n        DOMBubble.setAttribute('onmouseover', 'killBubble(this)');\r\n        document.body.appendChild(DOMBubble);\r\n\r\n        const flyInterval = this.flyup(DOMBubble);\r\n        this.deadline(DOMBubble, flyInterval);\r\n    }\r\n    deadline(DOMBubble, flyInterval) {\r\n        // indicator half life\r\n        setTimeout(function () {\r\n            DOMBubble.className += ' old';\r\n            DOMBubble.className = DOMBubble.className.replace('fade-in', '');\r\n        }, this.state.lifetime / 1.3);\r\n\r\n        // for deadline\r\n        setTimeout(function () {\r\n            if (DOMBubble.parentNode) {\r\n                DOMBubble.parentNode.removeChild(DOMBubble)\r\n            }\r\n            clearInterval(flyInterval);\r\n        }, this.state.lifetime);\r\n    }\r\n    flyup(DOMBubble) {\r\n        return setInterval(function () {\r\n            DOMBubble.style.top = parseInt(DOMBubble.style.top) - 10 + \"px\";\r\n        }, this.state.speed);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div className=\"App\">\r\n                <h1>I love to<br />React!</h1>\r\n                <p>Coded by : Francis Albores</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Bubble from './Bubble';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Bubble />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}